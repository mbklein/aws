AWSTemplateFormatVersion: '2010-09-09'
Description: Hydra-in-a-Box bastion host stack
Parameters:
  StackName:
    Type: String
    Description: Name of the ElasticBeanstalk environment
  SubnetID:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of an existing subnet IDs to use for the load balancer and auto
      scaling group
  SecurityGroups:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: A list of security groups, such as sg-a123fd85.
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances
  InstanceType:
    Description: The EC2 instance type
    Type: String
    Default: t2.nano
    AllowedValues: [t2.nano, t2.micro, t2.small, t2.medium, m3.medium, m3.large, m3.xlarge,
      m3.2xlarge, c3.large, c3.xlarge, c3.2xlarge, c3.4xlarge, c3.8xlarge, c4.large,
      c4.xlarge, c4.2xlarge, c4.4xlarge, c4.8xlarge, r3.large, r3.xlarge, r3.2xlarge,
      r3.4xlarge, r3.8xlarge, i2.xlarge, i2.2xlarge, i2.4xlarge, i2.8xlarge, d2.xlarge,
      d2.2xlarge, d2.4xlarge, d2.8xlarge, hi1.4xlarge, hs1.8xlarge, cr1.8xlarge, cc2.8xlarge]
    ConstraintDescription: must be a valid EC2 instance type.
Mappings:
  AWSRegionToAMI:
    us-east-1:
      AMIID: ami-dd3dd7cb
    us-west-1:
      AMIID: ami-7d54061d
    us-west-2:
      AMIID: ami-3b6fd05b
    eu-west-1:
      AMIID: ami-47ecb121
    ap-northeast-1:
      AMIID: ami-78d6af1f
    ap-southeast-2:
      AMIID: ami-1e47407d
    ap-southeast-1:
      AMIID: ami-a0903ac3
    eu-central-1:
      AMIID: ami-7d0ec112
Resources:
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref 'SubnetID'
      LaunchConfigurationName: !Ref 'ContainerInstances'
      MinSize: '1'
      MaxSize: '2'
      DesiredCapacity: '1'
      Tags:
      - Key: Name
        Value: !Ref 'StackName'
        PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '2'
        MaxBatchSize: '1'
        PauseTime: PT5M
        WaitOnResourceSignals: 'true'
  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Join ['', ['[main]

                    ', stack=, !Ref 'AWS::StackId', '

                    ', region=, !Ref 'AWS::Region', '

                    ']]
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join ['', ['[cfn-auto-reloader-hook]

                    ', 'triggers=post.update

                    ', 'path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init

                    ', 'action=/opt/aws/bin/cfn-init -v ', '         --stack ', !Ref 'AWS::StackName',
                  '         --resource ContainerInstances ', '         --region ',
                  !Ref 'AWS::Region', '

                    ', 'runas=root

                    ']]
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files: [/etc/cfn/cfn-hup.conf, /etc/cfn/hooks.d/cfn-auto-reloader.conf]
    Properties:
      AssociatePublicIpAddress: 'true'
      KeyName: !Ref 'KeyName'
      ImageId: !FindInMap [AWSRegionToAMI, !Ref 'AWS::Region', AMIID]
      InstanceType: !Ref 'InstanceType'
      SecurityGroups: !Ref 'SecurityGroups'
      UserData: !Base64
        Fn::Join:
        - ''
        - ['#!/bin/bash -xe

            ', 'yum install -y aws-cfn-bootstrap

            ', '/opt/aws/bin/cfn-init -v ', '         --stack ', !Ref 'AWS::StackName',
          '         --resource ContainerInstances ', '         --region ', !Ref 'AWS::Region',
          '

            ', '/opt/aws/bin/cfn-signal -e $? ', '         --stack ', !Ref 'AWS::StackName',
          '         --resource AutoScalingGroup ', '         --region ', !Ref 'AWS::Region',
          '

            ']
