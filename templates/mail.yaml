AWSTemplateFormatVersion: '2010-09-09'
Description: Hydra mail stack
Parameters:
  Domain:
    Type: String
    Description: Name of the ElasticBeanstalk environment
  HostedZoneName:
    Type: String
    Description: Route53 zone to create an alias in
Resources:
  RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref 'Domain'
      HostedZoneName: !Ref 'HostedZoneName'
      Type: MX
      TTL: '6000'
      ResourceRecords:
      - !Sub '10 inbound-smtp.${AWS::Region}.amazonaws.com'
  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
        - Status: Enabled
          ExpirationInDays: 7
          NoncurrentVersionExpirationInDays: 1
  SampleBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref 'S3Bucket'
      PolicyDocument:
        Statement:
        - Sid: GiveSESPermissionToWriteEmail
          Effect: Allow
          Principal:
            Service:
            - ses.amazonaws.com
          Action:
          - s3:PutObject
          Resource: !Sub 'arn:aws:s3:::${S3Bucket}/*'
          Condition:
            StringEquals:
              aws:Referer: !Ref 'AWS::AccountId'
  SesRuleSet:
    Type: Custom::SesRuleSetOutputs
    Properties:
      ServiceToken: !GetAtt 'SesRuleSetOutputs.Arn'
      RuleSet: default-rule-set
      RuleName: !Ref 'AWS::StackName'
      Domain: !Ref 'Domain'
      ObjectKeyPrefix: email
      BucketName: !Ref 'S3Bucket'
  SesRuleSetOutputs:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: "var response = require('cfn-response');\nexports.handler = function(event,\
          \ context) {\n    console.log('REQUEST RECEIVED:\\n', JSON.stringify(event));\n\
          \    var ruleName = event.ResourceProperties.RuleName;\n    var ruleSet\
          \ = event.ResourceProperties.RuleSet;\n    var aws = require('aws-sdk');\n\
          \    var ses  = new aws.SES();\n    if (event.RequestType == 'Delete') {\n\
          \        if (ruleSet) {\n          ses.deleteReceiptRule({RuleSetName: ruleSet,\
          \ RuleName: ruleName}).send();\n          ses.deleteReceiptRuleSet({RuleSetName:\
          \ ruleSet}).send();\n        }\n        response.send(event, context, response.SUCCESS);\n\
          \        return;\n    }\n    var domain = event.ResourceProperties.Domain.replace(/\\\
          .$/, '');\n    var objectKeyPrefix = event.ResourceProperties.ObjectKeyPrefix;\n\
          \    var bucketName = event.ResourceProperties.BucketName;\n    var responseData\
          \ = {};\n    if (ruleSet) {\n      \n      ses.createReceiptRuleSet({\n\
          \          RuleSetName: ruleSet }, function(err, data) {\n          if (err)\
          \ {\n              responseData = { Error: 'createReceiptRuleSet call failed'\
          \ };\n              console.log(responseData.Error + ':\\n', err);\n   \
          \           response.send(event, context, response.FAILED, responseData);\n\
          \              return;\n           }\n      });\n      ses.createReceiptRule({\
          \ \n          RuleSetName: ruleSet,\n          Rule: { \n             Name:\
          \ ruleName,\n             Enabled: true,\n             Recipients: [domain],\n\
          \             ScanEnabled: true,\n             Actions: [{S3Action: { ObjectKeyPrefix:\
          \ objectKeyPrefix, BucketName: bucketName }}]}}, function(err, data) {\n\
          \        if (err) {\n           responseData = { Error: 'createReceiptRule\
          \ call failed' };\n           console.log(responseData.Error + ':\\n', err);\n\
          \           response.send(event, context, response.FAILED, responseData);\n\
          \           return;\n        };\n        response.send(event, context, response.SUCCESS,\
          \ responseData);\n      });\n   } else {\n     responseData = {Error: 'Domain\
          \ not specified'};\n     console.log(responseData.Error);\n     response.send(event,\
          \ context, response.FAILED, responseData);\n   }\n};"
      Handler: index.handler
      Runtime: nodejs4.3
      Timeout: '10'
      Role: !GetAtt 'LambdaExecutionRole.Arn'
  HostedZone:
    Type: Custom::HostedZone
    Properties:
      ServiceToken: !GetAtt 'HostedZoneOutputs.Arn'
      HostedZoneName: !Ref 'HostedZoneName'
  HostedZoneOutputs:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: "var response = require('cfn-response');\nexports.handler = function(event,\
          \ context) {\n  console.log('REQUEST RECEIVED:\\n', JSON.stringify(event));\n\
          \  \n  if (event.RequestType == 'Delete') {\n      response.send(event,\
          \ context, response.SUCCESS);\n      return;\n  }\n  \n  var routeZoneName\
          \ = event.ResourceProperties.HostedZoneName;\n  var responseData = {};\n\
          \  \n  if (routeZoneName) {\n    var aws = require('aws-sdk');\n    var\
          \ route53 = new aws.Route53();\n\n    route53.listHostedZonesByName({ DNSName:\
          \ routeZoneName, MaxItems: '1'}, function(err, data) {\n      if (err) {\n\
          \         responseData = { Error: 'listHostedZonesByName call failed' };\n\
          \         console.log(responseData.Error + ':\\n', err);\n         response.send(event,\
          \ context, response.FAILED, responseData);\n         return;\n      }\n\n\
          \      if (data.HostedZones.length === 0) {\n         responseData = { Error:\
          \ 'listHostedZonesByName: unable to find hosted zone' };\n         console.log(responseData.Error\
          \ + ':\\n', err);\n         response.send(event, context, response.FAILED,\
          \ responseData);\n         return;  \n      }\n      \n      var routeZoneId\
          \ = data.HostedZones[0].Id;\n      responseData = { Id: routeZoneId }; \n\
          \      response.send(event, context, response.SUCCESS, responseData);\n\
          \    });\n  } else {\n    responseData = {Error: 'Route zone name not specified'};\n\
          \    console.log(responseData.Error);\n    response.send(event, context,\
          \ response.FAILED, responseData);\n  }\n};"
      Handler: index.handler
      Runtime: nodejs4.3
      Timeout: '10'
      Role: !GetAtt 'LambdaExecutionRole.Arn'
  EnableDomainDkim:
    Type: Custom::EnableDomainDkim
    Properties:
      ServiceToken: !GetAtt 'EnableDomainDkimOutputs.Arn'
      HostedZoneId: !GetAtt 'HostedZone.Id'
      Domain: !Ref 'Domain'
  EnableDomainDkimOutputs:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: "var response = require('cfn-response');\n\nfunction logError(response,\
          \ event, context, err, responseData) {\n   console.log(responseData.Error\
          \ + ':\\n', err);\n   response.send(event, context, response.FAILED, responseData);\n\
          }\n\nexports.handler = function(event, context) {\n  console.log('REQUEST\
          \ RECEIVED:\\n', JSON.stringify(event));\n\n  if (event.RequestType == 'Delete')\
          \ {\n      response.send(event, context, response.SUCCESS);\n      return;\n\
          \  }\n\n  var routeZoneId = event.ResourceProperties.HostedZoneId;\n  var\
          \ responseData = {};\n\n  if (routeZoneId) {\n    var domain = event.ResourceProperties.Domain.replace(/\\\
          .$/, '');\n\n    if (domain) {\n      var aws = require('aws-sdk');\n  \
          \    var route53 = new aws.Route53();\n      var ses  = new aws.SES();\n\
          \n      ses.verifyDomainIdentity({Domain: domain}, function(err, data) {\n\
          \        if (err) {\n          return logError(response, event, context,\
          \ err, { Error: 'verifyDomainIdentity call failed' });\n        }\n    \
          \    \n        route53.changeResourceRecordSets({\n          ChangeBatch:\
          \ {\n            Changes: [\n              {\n                Action: 'UPSERT',\n\
          \                ResourceRecordSet: {\n                  Name: \"_amazonses.\"\
          \ + domain,\n                  Type: 'TXT',\n                  ResourceRecords:\
          \ [\n                    {\n                      Value: '\"' + data.VerificationToken\
          \ + '\"'\n                    }\n                  ],\n                \
          \  TTL: 9000\n                }\n              }\n            ],\n     \
          \       Comment: 'Adding Domain Identity token'\n          },\n        \
          \  HostedZoneId: routeZoneId\n        }, function(err, data) {\n       \
          \     if (err) {\n              return logError(response, event, context,\
          \ err, { Error: 'changeResourceRecordSets call failed' });\n           \
          \ }\n\n            ses.verifyDomainDkim({Domain: domain}, function(err,\
          \ data) {\n              if (err) {\n                return logError(response,\
          \ event, context, err, { Error: 'verifyDomainDkim call failed' });\n   \
          \           }\n\n              var changes = data.DkimTokens.map(function(v)\
          \ {\n                return {\n                  Action: 'UPSERT',\n   \
          \               ResourceRecordSet: {\n                    Name: v + \"._domainkey.\"\
          \ + domain,\n                    Type: 'CNAME',\n                    ResourceRecords:\
          \ [\n                      {\n                        Value: v + \".dkim.amazonses.com\"\
          \n                      }\n                    ],\n                    TTL:\
          \ 9000\n                  }\n                };\n              });\n\n \
          \             route53.changeResourceRecordSets({\n                ChangeBatch:\
          \ {\n                  Changes: changes,\n                  Comment: 'Adding\
          \ DKIM tokens'\n                },\n                HostedZoneId: routeZoneId\n\
          \                }, function(err, data) {\n                  if (err) {\n\
          \                    return logError(response, event, context, err, { Error:\
          \ 'changeResourceRecordSets call failed' });\n                  }\n    \
          \               response.send(event, context, response.SUCCESS, responseData);\n\
          \               });\n            });\n        });\n      });\n    } else\
          \ {\n      responseData = {Error: 'Domain not specified'};\n      console.log(responseData.Error);\n\
          \      response.send(event, context, response.FAILED, responseData);\n \
          \   } \n  } else {\n    responseData = {Error: 'HostedZoneId not specified'};\n\
          \    console.log(responseData.Error);\n    response.send(event, context,\
          \ response.FAILED, responseData);\n  }\n};"
      Handler: index.handler
      Runtime: nodejs4.3
      Timeout: '10'
      Role: !GetAtt 'LambdaExecutionRole.Arn'
  SetIdentityDkimEnabled:
    Type: Custom::SetIdentityDkimEnabled
    DependsOn: EnableDomainDkim
    Properties:
      ServiceToken: !GetAtt 'SetIdentityDkimEnabledOutputs.Arn'
      Domain: !Ref 'Domain'
  SetIdentityDkimEnabledOutputs:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: "var response = require('cfn-response');\n\nfunction logError(response,\
          \ event, context, err, responseData) {\n   console.log(responseData.Error\
          \ + ':\\n', err);\n   response.send(event, context, response.FAILED, responseData);\n\
          }\n\nexports.handler = function(event, context) {\n  console.log('REQUEST\
          \ RECEIVED:\\n', JSON.stringify(event));\n\n  if (event.RequestType == 'Delete')\
          \ {\n      response.send(event, context, response.SUCCESS);\n      return;\n\
          \  }\n\n  var domain = event.ResourceProperties.Domain.replace(/\\.$/, '');\n\
          \  var responseData = {};\n\n  if (domain) {\n      var aws = require('aws-sdk');\n\
          \      var ses  = new aws.SES();\n\n      var done = false;\n      var timerId\
          \ = setInterval(function() {\n        ses.setIdentityDkimEnabled({ DkimEnabled:\
          \ true, Identity: domain}, function(err, data) {\n        if (err) {\n \
          \         console.log(responseData.Error + ':\\n', err);\n        } else\
          \ {\n          clearInterval(timerId);\n          response.send(event, context,\
          \ response.SUCCESS, responseData);\n        }\n      });\n      }, 5000);\n\
          \    } else {\n      responseData = {Error: 'Domain not specified'};\n \
          \     console.log(responseData.Error);\n      response.send(event, context,\
          \ response.FAILED, responseData);\n    } \n};"
      Handler: index.handler
      Runtime: nodejs4.3
      Timeout: '30'
      Role: !GetAtt 'LambdaExecutionRole.Arn'
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkEnhancedHealth
      Policies:
      - PolicyName: !Sub '${Domain}-mail-lambda'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - ses:*
            Resource: '*'
          - Effect: Allow
            Action:
            - route53:*
            Resource:
            - '*'
