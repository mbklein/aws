{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description": "Hydra Base Stack",

  "Parameters" : {
    "KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the ECS instances"
    },
    "S3Bucket": {
      "Type": "String",
      "Description": "S3 bucket to the cfn deployment artifacts"
    },
    "S3BucketEB": {
      "Type": "String",
      "Description": "S3 bucket to the eb deployment artifacts"
    },
    "S3KeyPrefix" : {
      "Description" : "S3 prefix to deployment artifacts",
      "Type" : "String",
      "Default" : "infrastructure/current"
    },
    "PublicZoneName" : {
      "Type" : "String",
      "Description" : "Existing Route53 zone; used to create a public DNS record for the web application"
    },
    "FcrepoDatabaseUsername": {
      "Type": "String",
      "Description": "Database Root Username",
      "Default": "ebroot"
    },
    "FcrepoDatabasePassword": {
      "Type": "String",
      "Description": "Password for the DB Root User",
      "NoEcho": "true"
    },
    "FcrepoDatabaseName": {
      "Type": "String",
      "Description": "Name of the database",
      "Default": "fcrepo"
    },
    "FcrepoDatabaseStorageSize" : {
      "Type" : "Number",
      "Description" : "Size of DB in Gigs",
      "Default" : "5"
    },
    "FcrepoDatabaseMultiAZ" : {
      "Type" : "String",
      "Description" : "Launch the database in multiple availability zones",
      "AllowedValues" : ["true", "false"],
      "Default" : "true"
    },
    "FcrepoBinaryBucket": {
      "Type": "String",
      "Description": "S3 Bucket for Fedora's binary object store"
    },
    "FcrepoBinaryBucketKey": {
      "Type": "String",
      "Description": "AWS Access Key ID for binary object store"
    },
    "FcrepoBinaryBucketSecret": {
      "Type": "String",
      "Description": "AWS Secret Key for binary object store"
    },
    "FcrepoInstanceType" : {
      "Type": "String",
      "Description": "Instance type to launch",
      "Default" : "t2.large"
    },
    "S3FedoraFilename" : {
      "Type": "String",
      "Description": "S3 key to the Fcrepo war",
      "Default" : "fcrepo-webapp.war"
    },
    "FcrepoMinSize" : {
      "Type": "Number",
      "Description": "Minimum number of Fedora instances to launch",
      "Default": "1"
    },
    "FcrepoMaxSize" : {
      "Type": "Number",
      "Description": "Maximum number of Fedora instances to launch",
      "Default": "1"
    },
    "SolrCloudSize" : {
      "Type": "Number",
      "Description": "Number of Solr instances to launch",
      "Default": "1"
    },
    "SolrCloudInstanceType" : {
      "Type": "String",
      "Description": "Instance type to launch",
      "Default": "t2.large"
    },
    "SolrCloudMaxSize" : {
      "Type": "Number",
      "Description": "Maximum number of instances that can be launched in your ECS cluster",
      "Default": "6"
    },
    "SolrCloudDockerImage" : {
      "Type" : "String",
      "Description" : "Docker image to run",
      "Default": "hybox/solr-ecs:6"
    },
    "SolrCloudDataVolumePath" : {
      "Type": "String",
      "Description": "The path on the host container instance that is presented to the container",
      "Default": "var/lib/docker/vfs/dir/solr-data"
    },
    "ZookeeperEnsembleSize" : {
      "Type": "Number",
      "Description": "Number of instances to launch",
      "Default": "1"
    },
    "ZookeeperEnsembleInstanceType" : {
      "Type": "String",
      "Description": "Instance type to launch",
      "Default": "t2.micro"
    },
    "ZookeeperEnsembleMaxSize" : {
      "Type": "String",
      "Description": "Max number of zks",
      "Default": "4"
    },
    "ZookeeperDockerImage" : {
      "Type": "String",
      "Description": "Docker Image for zks",
      "Default": "hybox/exhibitor:test"
    },
    "RedisInstanceType" : {
      "Type": "String",
      "Description": "Instance type to launch",
      "Default": "cache.m1.small"
    },
    "BastionInstanceType" : {
      "Type" : "String",
      "Description" : "The EC2 instance type",
      "Default": "t2.nano"
    },
    "FcrepoDatabaseInstanceType" : {
      "Type": "String",
      "Description": "Instance type to launch",
      "Default": "db.t2.large"
    },
    "VpnFqdn": {
      "Description" : "The fully-qualified hostname for the VPN server",
      "Type" : "String"
    },
    "VpnUser" : {
      "Description" : "The username for the VPN user",
      "Type" : "String",
      "Default" : "admin"
    },
    "VpnPassword" : {
      "Type" : "String",
      "Description" : "The password for the VPN user",
      "NoEcho" : "true"
    }
  },
  "Metadata" : {
    "AWS::CloudFormation::Interface" : {
      "ParameterGroups" : [
        {
          "Label" : { "default" : "Deployment Artifacts" },
          "Parameters" : [ "S3Bucket", "S3KeyPrefix", "S3BucketEB" ]
        },
        {
          "Label" : { "default" : "Network Configuration" },
          "Parameters" : [ "KeyName", "PublicZoneName" ]
        },
        {
          "Label" : { "default" : "Resources"},
          "Parameters" : ["FcrepoDatabaseInstanceType", "RedisInstanceType", "FcrepoInstanceType", "SolrCloudSize", "SolrCloudInstanceType", "ZookeeperEnsembleSize", "ZookeeperEnsembleInstanceType"]
        },
        {
          "Label" : { "default" : "Fedora Repository Configuration" },
          "Parameters" : [ "S3FedoraFilename", "FcrepoDatabaseUsername", "FcrepoDatabasePassword" ]
        },
        {
          "Label" : { "default" : "OpenVPN Configuration" },
          "Parameters" : [ "VpnFqdn", "VpnUser", "VpnPassword" ]
        }
      ]
    }
  },
  "Resources" : {
    "vpc" : {
      "Type" : "AWS::CloudFormation::Stack",
      "Properties" : {
        "Parameters" : {
          "StackName" : { "Ref" : "AWS::StackName"},
          "KeyName" : { "Fn::Join" : [",", [{ "Ref" : "KeyName" }]] },
          "HostedZoneName" : { "Fn::Join" : [".", [{ "Ref" : "AWS::StackName"}, "vpc", { "Ref" : "PublicZoneName" }]] }
        },
        "TemplateURL" : { "Fn::Join" : ["", ["https://s3.amazonaws.com/", { "Ref" : "S3Bucket" }, "/cloudformation/", { "Ref" : "S3KeyPrefix"}, "/templates/vpc.json"]] }
      }
    },
    "securitygroups" : {
      "Type" : "AWS::CloudFormation::Stack",
      "Properties" : {
        "Parameters" : {
          "StackName" : { "Ref" : "AWS::StackName" },
          "VPC" : { "Fn::GetAtt" : ["vpc", "Outputs.VPCID"] }
        },
        "TemplateURL" : { "Fn::Join" : ["", ["https://s3.amazonaws.com/", { "Ref" : "S3Bucket" }, "/cloudformation/", { "Ref" : "S3KeyPrefix"}, "/templates/securitygroups.json"]] }
      }
    },
    "zookeeper" : {
      "Type" : "AWS::CloudFormation::Stack",
      "Properties" : {
        "Parameters" : {
          "StackName" : { "Ref" : "AWS::StackName"},
          "KeyName" : { "Fn::Join" : [",", [{ "Ref" : "KeyName" }]] },
          "SubnetID" : { "Fn::GetAtt" : ["vpc", "Outputs.PrivateSubnets"] },
          "SecurityGroups" : { "Fn::Join" : [",", [{ "Fn::GetAtt" : [ "securitygroups", "Outputs.Zookeeper"] }, { "Fn::GetAtt" : [ "securitygroups", "Outputs.Default"] }]] },
          "LBSecurityGroups" : { "Fn::GetAtt" : [ "securitygroups", "Outputs.ZookeeperLb"] },
          "HostedZoneName" : { "Fn::GetAtt" : ["vpc", "Outputs.HostedZoneName"] },
          "DesiredCapacity" : { "Ref" : "ZookeeperEnsembleSize" },
          "MaxSize" : { "Ref" : "ZookeeperEnsembleMaxSize" },
          "DockerImage" : { "Ref" : "ZookeeperDockerImage" },
          "InstanceType" : { "Ref" : "ZookeeperEnsembleInstanceType" }
        },
        "TemplateURL" : { "Fn::Join" : ["", ["https://s3.amazonaws.com/", { "Ref" : "S3Bucket" }, "/cloudformation/", { "Ref" : "S3KeyPrefix"}, "/templates/zookeeper.json"]] }
      }
    },
    "fcrepo" : {
      "Type" : "AWS::CloudFormation::Stack",
      "Properties" : {
        "Parameters" : {
          "StackName" : { "Ref" : "AWS::StackName"},
          "KeyName" : { "Fn::Join" : [",", [{ "Ref" : "KeyName" }]] },
          "SubnetID" : { "Fn::GetAtt" : ["vpc", "Outputs.PrivateSubnets"] },
          "SecurityGroups" : { "Fn::Join" : [",", [{ "Fn::GetAtt" : [ "securitygroups", "Outputs.Fcrepo"] }, { "Fn::GetAtt" : [ "securitygroups", "Outputs.Default"] }]] },
          "LBSecurityGroups" : { "Fn::GetAtt" : [ "securitygroups", "Outputs.FcrepoLb"] },
          "S3Bucket" : { "Ref" : "S3BucketEB" },
          "S3Key" : { "Ref" : "S3FedoraFilename" },
          "MinSize" : { "Ref" : "FcrepoMinSize" },
          "MaxSize" : { "Ref" : "FcrepoMaxSize" },
          "HostedZoneName" : { "Fn::GetAtt" : ["vpc", "Outputs.HostedZoneName"] },
          "InstanceType" : { "Ref" : "FcrepoInstanceType" },
          "RDSDatabaseName" : { "Fn::GetAtt" : ["fcrepodb", "Outputs.DatabaseName"] },
          "RDSHostname" : { "Fn::GetAtt" : ["fcrepodb", "Outputs.EndpointAddress"] },
          "RDSPort" : { "Fn::GetAtt" : ["fcrepodb", "Outputs.EndpointPort"] },
          "RDSUsername" : { "Ref" : "FcrepoDatabaseUsername" },
          "RDSPassword" : { "Ref" : "FcrepoDatabasePassword" },
          "BinaryBucket" : { "Ref" : "FcrepoBinaryBucket" },
          "BinaryBucketKey" : { "Ref" : "FcrepoBinaryBucketKey" },
          "BinaryBucketSecret" : { "Ref" : "FcrepoBinaryBucketSecret" }
        },
        "TemplateURL" : { "Fn::Join" : ["", ["https://s3.amazonaws.com/", { "Ref" : "S3Bucket" }, "/cloudformation/", { "Ref" : "S3KeyPrefix"}, "/templates/fcrepo.json"]] }
      }
    },
    "solr" : {
      "Type" : "AWS::CloudFormation::Stack",
      "Properties" : {
        "Parameters" : {
          "StackName" : { "Ref" : "AWS::StackName"},
          "KeyName" : { "Fn::Join" : [",", [{ "Ref" : "KeyName" }]] },
          "HostedZoneName" : { "Fn::GetAtt" : ["vpc", "Outputs.HostedZoneName"] },
          "SubnetID" : { "Fn::GetAtt" : ["vpc", "Outputs.PrivateSubnets"] },
          "SecurityGroups" : { "Fn::Join" : [",", [{ "Fn::GetAtt" : [ "securitygroups", "Outputs.Solr"] }, { "Fn::GetAtt" : [ "securitygroups", "Outputs.Default"] }]] },
          "LBSecurityGroups" : { "Fn::GetAtt" : [ "securitygroups", "Outputs.SolrLb"] },
          "ZookeeperHosts" : { "Fn::GetAtt" : ["zookeeper", "Outputs.EndpointAddress"] },
          "DesiredCapacity" : { "Ref" : "SolrCloudSize" },
          "MaxSize" : { "Ref" : "SolrCloudMaxSize" },
          "DockerImage" : { "Ref" : "SolrCloudDockerImage" },
          "DataVolumePath" : { "Ref" : "SolrCloudDataVolumePath" },
          "InstanceType" : { "Ref" : "SolrCloudInstanceType" }
        },
        "TemplateURL" : { "Fn::Join" : ["", ["https://s3.amazonaws.com/", { "Ref" : "S3Bucket" }, "/cloudformation/", { "Ref" : "S3KeyPrefix"}, "/templates/solr.json"]] }
      }
    },
    "redis" : {
      "Type" : "AWS::CloudFormation::Stack",
      "Properties" : {
        "Parameters" : {
          "StackName" : { "Ref" : "AWS::StackName"},
          "SubnetID" : { "Fn::GetAtt" : ["vpc", "Outputs.PrivateSubnets"] },
          "SecurityGroups" : { "Fn::GetAtt" : [ "securitygroups", "Outputs.Redis"] },
          "InstanceType" : { "Ref" : "RedisInstanceType" }
        },
        "TemplateURL" : { "Fn::Join" : ["", ["https://s3.amazonaws.com/", { "Ref" : "S3Bucket" }, "/cloudformation/", { "Ref" : "S3KeyPrefix"}, "/templates/redis.json"]] }
      }
    },
    "fcrepodb" : {
      "Type" : "AWS::CloudFormation::Stack",
      "Properties" : {
        "Parameters" : {
          "SubnetID" : { "Fn::GetAtt" : ["vpc", "Outputs.PrivateSubnets"] },
          "SecurityGroups" : { "Fn::GetAtt" : [ "securitygroups", "Outputs.FcrepoDatabase"] },
          "MasterUsername" : { "Ref" : "FcrepoDatabaseUsername" },
          "MasterUserPassword" : { "Ref" : "FcrepoDatabasePassword" },
          "DatabaseName" : { "Ref" : "FcrepoDatabaseName" },
          "AllocatedStorage" : { "Ref" : "FcrepoDatabaseStorageSize" },
          "MultiAZDatabase" : { "Ref" : "FcrepoDatabaseMultiAZ" },
          "DBInstanceClass" : { "Ref" : "FcrepoDatabaseInstanceType" }
        },
        "TemplateURL" : { "Fn::Join" : ["", ["https://s3.amazonaws.com/", { "Ref" : "S3Bucket" }, "/cloudformation/", { "Ref" : "S3KeyPrefix"}, "/templates/postgres.json"]] }
      }
    },
    "mail" : {
      "Type" : "AWS::CloudFormation::Stack",
      "Properties" : {
        "Parameters" : {
          "Domain" : { "Fn::Join": [ ".", [ { "Ref": "AWS::StackName" }, { "Ref": "PublicZoneName" } ] ] },
          "HostedZoneName" : { "Ref" : "PublicZoneName" }
        },
        "TemplateURL" : { "Fn::Join" : ["", ["https://s3.amazonaws.com/", { "Ref" : "S3Bucket" }, "/cloudformation/", { "Ref" : "S3KeyPrefix"}, "/templates/mail.json"]] }
      }
    },
    "openvpn" : {
      "Type" : "AWS::CloudFormation::Stack",
      "Properties" : {
        "Parameters" : {
          "StackName" : { "Ref" : "AWS::StackName"},
          "KeyName" : { "Fn::Join" : [",", [{ "Ref" : "KeyName" }]] },
          "SubnetID" : { "Fn::Select" : [ "0", { "Fn::Split": [",", { "Fn::GetAtt" : ["vpc", "Outputs.PublicSubnets"] }]}] },
          "SecurityGroups" : { "Fn::Join" : [",", [{ "Fn::GetAtt" : [ "securitygroups", "Outputs.Bastion"] }, { "Fn::GetAtt" : [ "securitygroups", "Outputs.OpenVPN"] }]] },
          "HostedZoneName" : { "Fn::Join": [ ".", [ { "Ref": "AWS::StackName" }, { "Ref": "PublicZoneName" } ] ] },
          "VpnFqdn" : { "Ref" : "VpnFqdn" },
          "VpnUser" : { "Ref" : "VpnUser" },
          "VpnPassword" : { "Ref" : "VpnPassword" }
        },
        "TemplateURL" : { "Fn::Join" : ["", ["https://s3.amazonaws.com/", { "Ref" : "S3Bucket" }, "/cloudformation/", { "Ref" : "S3KeyPrefix"}, "/templates/openvpn.json"]] }
      }
    },
    "PublicDNS" : {
      "Type": "AWS::Route53::HostedZone",
      "Properties": {
        "Name": { "Fn::Join" : [".", [{ "Ref" : "AWS::StackName"}, { "Ref" : "PublicZoneName" }]] }
      }
    },
    "PublicDNSNameServers" : {
      "Type": "AWS::Route53::RecordSet",
      "Properties" : {
        "Name" : { "Fn::Join" : [".", [{ "Ref" : "AWS::StackName"}, { "Ref" : "PublicZoneName" }]] },
        "HostedZoneName" : { "Ref" : "PublicZoneName"},
        "Type" : "NS",
        "TTL": "900",
        "ResourceRecords" : { "Fn::GetAtt" : ["PublicDNS", "NameServers"] }
      }
    }
  },
  "Outputs": {
    "VPN" : {
      "Description" : "URL for the OpenVPN server",
      "Value" : { "Fn::GetAtt" : ["openvpn", "Outputs.URL"] }
    },
    "PublicZoneName" : {
      "Description" : "Name of the public subzone",
      "Value" : { "Fn::Join" : [".", [{ "Ref" : "AWS::StackName" }, { "Ref" : "PublicZoneName" }]] },
      "Export" : {
        "Name" : { "Fn::Join": ["-", [{ "Ref" : "AWS::StackName" } ,"dns", "PublicZoneName"]] }
      }
    }
  }
}
