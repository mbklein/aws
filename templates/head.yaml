AWSTemplateFormatVersion: '2010-09-09'
Description: Hydra Head Stack
Parameters:
  InfrastructureStack:
    Type: String
    Description: Name of the CloudFormation hydra stack supporting this head
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances
  S3Bucket:
    Type: String
    Description: S3 bucket with cloudformation templates
  S3BucketEB:
    Type: String
    Description: S3 bucket with the application zip
  S3Key:
    Type: String
    Description: S3 key to the application zip
  S3KeyPrefix:
    Type: String
    Description: S3 prefix to deployment artifacts
    Default: infrastructure/current
  DatabaseInstanceType:
    Type: String
    Description: Instance type to launch
    Default: db.t2.large
  DatabaseUsername:
    Type: String
    Description: Database Root Username
    Default: ebroot
  DatabasePassword:
    Type: String
    Description: Password for the DB Root User
    NoEcho: 'true'
  DatabaseName:
    Type: String
    Description: Name of the database
  DatabaseStorageSize:
    Type: String
    Description: Size of DB in Gigs
    Default: '5'
  DatabaseMultiAZ:
    Type: String
    Description: Launch the database in multiple availability zones
    AllowedValues:
    - 'true'
    - 'false'
    Default: 'true'
  SecretKeyBase:
    Type: String
    Description: Secret key for Rails
    NoEcho: 'true'
  SlackWebhookToken:
    Type: String
    Description: Slack generated token for Incoming Webhook
    NoEcho: 'true'
    Default: ''
  SlackWebhookChannel:
    Type: String
    Description: Slack channel for posting notifications
    Default: ''
  WorkerInstanceType:
    Type: String
    Description: Instance type to launch
    Default: t2.medium
  WorkerMinSize:
    Type: Number
    Description: Minimum number of instances to launch
    Default: '1'
  WorkerMaxSize:
    Type: Number
    Description: Maximum number of instances to launch
    Default: '4'
  WebappInstanceType:
    Type: String
    Description: Instance type to launch
    Default: t2.large
  WebappMinSize:
    Type: Number
    Description: Minimum number of instances to launch
    Default: '1'
  WebappMaxSize:
    Type: Number
    Description: Maximum number of instances to launch
    Default: '4'
  WebappHealthReportingSystemType:
    Type: String
    Description: Health reporting system
    AllowedValues:
    - enhanced
    - basic
    Default: enhanced
  WorkerHealthReportingSystemType:
    Type: String
    Description: Health reporting system
    AllowedValues:
    - enhanced
    - basic
    Default: enhanced
  ContinuousDeployment:
    Type: String
    Description: Configure continuous deployment for the webapp and workers?
    AllowedValues:
    - 'true'
    - 'false'
    Default: 'true'
  QueuePrefix:
    Type: String
    Description: SQS Queue prefix
  SSLCertificateId:
    Type: String
    Description: The Amazon Resource Name (ARN) of the SSL certificate
    Default: ''
  GoogleAnalyticsId:
    Type: String
    Description: The Google Analytics id, e.g UA-111111-1
    Default: ''
  HoneybadgerApiKey:
    Type: String
    Description: The api key for honeybadger.io
    NoEcho: 'true'
    Default: ''
  LogzioKey:
    Type: String
    Description: The logz.io key
    NoEcho: 'true'
    Default: ''
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Deployment Artifacts
      Parameters:
      - S3Bucket
      - S3Key
    - Label:
        default: Resources
      Parameters:
      - WorkerInstanceType
      - WorkerMinSize
      - WorkerMaxSize
      - WebappInstanceType
      - WebappMinSize
      - WebappMaxSize
      - DatabaseInstanceType
    - Label:
        default: Application Configuration
      Parameters:
      - DatabaseUsername
      - DatabasePassword
      - SecretKeyBase
      - QueuePrefix
    - Label:
        default: Optional Configuration Parameters
      Parameters:
      - SlackWebhookToken
      - SlackWebhookChannel
      - QueuePrefix
      - SSLCertificateId
      - GoogleAnalyticsId
      - HoneybadgerApiKey
      - LogzioKey
Resources:
  slack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        SlackWebhookToken: !Ref 'SlackWebhookToken'
        SlackWebhookChannel: !Ref 'SlackWebhookChannel'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${S3Bucket}/cloudformation/${S3KeyPrefix}/templates/slack.yaml'
  database:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        SubnetID:
          Fn::ImportValue: !Sub '${InfrastructureStack}-vpc-PrivateSubnets'
        SecurityGroups:
          Fn::ImportValue: !Sub '${InfrastructureStack}-sg-Database'
        MasterUsername: !Ref 'DatabaseUsername'
        MasterUserPassword: !Ref 'DatabasePassword'
        DatabaseName: !Ref 'DatabaseName'
        AllocatedStorage: !Ref 'DatabaseStorageSize'
        MultiAZDatabase: !Ref 'DatabaseMultiAZ'
        DBInstanceClass: !Ref 'DatabaseInstanceType'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${S3Bucket}/cloudformation/${S3KeyPrefix}/templates/postgres.yaml'
  application:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        StackName: !Ref 'AWS::StackName'
        KeyName: !Sub '${KeyName}'
        S3Bucket: !Ref 'S3Bucket'
        S3BucketEB: !Ref 'S3BucketEB'
        S3Key: !Ref 'S3Key'
        S3KeyPrefix: !Ref 'S3KeyPrefix'
        BeanstalkSNSTopic: !GetAtt 'slack.Outputs.BeanstalkSNSTopic'
        QueuePrefix: !Ref 'QueuePrefix'
        PrivateSubnets:
          Fn::ImportValue: !Sub '${InfrastructureStack}-vpc-PrivateSubnets'
        PublicSubnets:
          Fn::ImportValue: !Sub '${InfrastructureStack}-vpc-PublicSubnets'
        SecurityGroups:
          Fn::Join:
          - ','
          - - Fn::ImportValue: !Sub '${InfrastructureStack}-sg-Default'
            - Fn::ImportValue: !Sub '${InfrastructureStack}-sg-Webapp'
        LBSecurityGroups:
          Fn::ImportValue: !Sub '${InfrastructureStack}-sg-WebappLb'
        HostedZoneName:
          Fn::ImportValue: !Sub '${InfrastructureStack}-dns-PublicZoneName'
        SecretKeyBase: !Ref 'SecretKeyBase'
        FcrepoUrl:
          Fn::ImportValue: !Sub '${InfrastructureStack}-fcrepo-URL'
        SolrUrl:
          Fn::ImportValue: !Sub '${InfrastructureStack}-solr-URL'
        ZookeeperHosts:
          Fn::Join:
          - '/'
          - - Fn::ImportValue: !Sub '${InfrastructureStack}-zookeeper-EndpointAddress'
            - configs
        RedisHost:
          Fn::ImportValue: !Sub '${InfrastructureStack}-redis-EndpointAddress'
        RedisPort:
          Fn::ImportValue: !Sub '${InfrastructureStack}-redis-EndpointPort'
        RDSDatabaseName: !GetAtt 'database.Outputs.DatabaseName'
        RDSHostname: !GetAtt 'database.Outputs.EndpointAddress'
        RDSPort: !GetAtt 'database.Outputs.EndpointPort'
        RDSUsername: !Ref 'DatabaseUsername'
        RDSPassword: !Ref 'DatabasePassword'
        WebappInstanceType: !Ref 'WebappInstanceType'
        WebappMinSize: !Ref 'WebappMinSize'
        WebappMaxSize: !Ref 'WebappMaxSize'
        WorkerInstanceType: !Ref 'WorkerInstanceType'
        WorkerMinSize: !Ref 'WorkerMinSize'
        WorkerMaxSize: !Ref 'WorkerMaxSize'
        WebappHealthReportingSystemType: !Ref 'WebappHealthReportingSystemType'
        WorkerHealthReportingSystemType: !Ref 'WorkerHealthReportingSystemType'
        SSLCertificateId: !Ref 'SSLCertificateId'
        ContinuousDeployment: !Ref 'ContinuousDeployment'
        GoogleAnalyticsId: !Ref 'GoogleAnalyticsId'
        HoneybadgerApiKey: !Ref 'HoneybadgerApiKey'
        LogzioKey: !Ref 'LogzioKey'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${S3Bucket}/cloudformation/${S3KeyPrefix}/templates/application.yaml'
Outputs:
  URL:
    Description: URL for the deployed application
    Value: !GetAtt 'application.Outputs.URL'
