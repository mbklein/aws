AWSTemplateFormatVersion: '2010-09-09'
Description: Avalon Transcoding Pipeline
Parameters:
  StackName:
    Type: String
    Description: Name of the application stack (for tagging and naming)
Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: !Sub '${AWS::StackName}-cf-elastic-transcoder-pipeline'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - elastictranscoder:*
            - iam:PassRole
            Resource:
            - "*"
  PipelineFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          exports.handler = (event, context, callback) => {
            var response = require('cfn-response');

            reply = function(err, physicalId, data) {
              if (data == null) data = {};
              data.LogicalResourceId = event.LogicalResourceId;
              data.RequestId = event.RequestId;
              data.StackId = event.StackId;

              if (err) {
                response.send(event, context, response.FAILED, { "Error": "Error: " + err });
              } else {
                response.send(event, context, response.SUCCESS, data, physicalId);
              }
            }

            console.log('REQUEST RECEIVED:', JSON.stringify(event));
            var physicalResourceId = event.PhysicalResourceId;
            var re = /^(.+)\$OK$/;
            if ((physicalResourceId != null) && re.test(physicalResourceId)) {
              physicalResourceId = physicalResourceId.match(re)[1];
            }
            console.log('PHYSICAL RESOURCE ID:', physicalResourceId);
            try {

                var AWS = require('aws-sdk');
                var elastictranscoder = new AWS.ElasticTranscoder();

                params = event.ResourceProperties;
                delete params.ServiceToken;
                switch (event.RequestType) {
                  case "Create":
                    elastictranscoder.createPipeline(params, function(err, data) {
                      if (err) {
                        console.error(err);
                        reply(err);
                      } else  {
                        reply(null, data.Pipeline.Id + "$OK", { "Arn": data.Pipeline.Arn });
                      }
                    });
                    break;
                  case "Update":
                    if (physicalResourceId == null) {
                      reply(null, physicalResourceId, { Id: physicalResourceId });
                      return;
                    }
                    params.Id = physicalResourceId;
                    delete params.OutputBucket;
                    elastictranscoder.updatePipeline(params, function(err, data) {
                      if (err) {
                        console.error(err);
                        reply(err);
                      } else {
                        reply(null, data.Pipeline.Id, { "Arn": data.Pipeline.Arn });
                      }
                    });
                    break;
                  case "Delete":
                    if (physicalResourceId == null) {
                      reply(null, physicalResourceId, { Id: physicalResourceId });
                      return;
                    }
                    elastictranscoder.deletePipeline({ Id: physicalResourceId }, function(err, data) {
                      if (err) console.error(err);
                      reply(err, physicalResourceId, {});
                    });
                    break;
                  default:
                    reply("Unknown request type: " + event.RequestType);
                }
            } catch(err) {
                reply(err);
            }
          };
      Handler: index.handler
      Runtime: nodejs4.3
      Timeout: '10'
      Role: !GetAtt 'LambdaExecutionRole.Arn'
  MasterfileBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
  DerivativeBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
  PipelineNotification:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: pipeline-topic
  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - elastictranscoder.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
  PipelinePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: pipeline-policy
      Roles:
      - !Ref 'PipelineRole'
      PolicyDocument:
        Version: '2008-10-17'
        Statement:
        - Sid: '1'
          Effect: Allow
          Action:
          - s3:Put*
          - s3:ListBucket
          - s3:*MultipartUpload*
          - s3:Get*
          Resource:
          - !Sub 'arn:aws:s3:::${MasterfileBucket}'
          - !Sub 'arn:aws:s3:::${DerivativeBucket}'
          - !Sub 'arn:aws:s3:::${MasterfileBucket}/*'
          - !Sub 'arn:aws:s3:::${DerivativeBucket}/*'
        - Sid: '2'
          Effect: Allow
          Action: sns:Publish
          Resource:
          - !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${PipelineNotification}'
        - Sid: '3'
          Effect: Deny
          Action:
          - s3:*Delete*
          - s3:*Policy*
          - sns:*Remove*
          - sns:*Delete*
          - sns:*Permission*
          Resource: '*'
  TranscodingPipeline:
    Type: Custom::ElasticTranscoderPipeline
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt 'PipelineFunction.Arn'
      Name: !Sub '${StackName}-transcoding-pipeline'
      Role: !GetAtt 'PipelineRole.Arn'
      InputBucket: !Ref 'MasterfileBucket'
      OutputBucket: !Ref 'DerivativeBucket'
      Notifications:
        Completed: !Ref 'PipelineNotification'
        Error: !Ref 'PipelineNotification'
        Progressing: !Ref 'PipelineNotification'
        Warning: !Ref 'PipelineNotification'
Outputs:
  Pipeline:
    Description: Transcoding Pipeline
    Value: !Sub '${StackName}-transcoding-pipeline'
  PipelineSNSTopic:
    Description: SNS Topic for the transcoding pipeline
    Value: !Ref 'PipelineNotification'
  MasterfileBucket:
    Description: Bucket for Masterfiles
    Value: !Ref 'MasterfileBucket'
  DerivativeBucket:
    Description: Bucket for Derivatives
    Value: !Ref 'DerivativeBucket'
