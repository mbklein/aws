AWSTemplateFormatVersion: '2010-09-09'
Description: Hydra slack notifications
Parameters:
  SlackWebhookToken:
    Type: String
    Description: Slack generated token for Incoming Webhook
    NoEcho: 'true'
  SlackWebhookChannel:
    Type: String
    Description: Slack channel for posting notifications
Conditions:
  CreateSlackIntegration: !Not [!Equals [!Ref 'SlackWebhookToken', '']]
Resources:
  BeanstalkSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - !If [CreateSlackIntegration, {Endpoint: !GetAtt 'LambdaSNSFunction.Arn', Protocol: lambda},
        !Ref 'AWS::NoValue']
  LambdaSNSFunction:
    Type: AWS::Lambda::Function
    Condition: CreateSlackIntegration
    Properties:
      Code:
        ZipFile: !Sub ["var https = require('https');\nvar util = require('util');\n\
            exports.handler = function(event, context) {\n    console.log(JSON.stringify(event,\
            \ null, 2));\n    console.log('From SNS:', event.Records[0].Sns.Message);\n\
            \    var postData = {\n${Param1}\n        'text': '*' + event.Records[0].Sns.Subject\
            \ + '*',\n    };\n    var message = event.Records[0].Sns.Message;\n  \
            \  var severity = 'good';\n    var dangerMessages = [\n        ' but with\
            \ errors',\n        ' to RED',\n        ' to Severe',\n        'During\
            \ an aborted deployment',\n        'Failed to deploy application',\n \
            \       'Failed to deploy configuration',\n        'has a dependent object',\n\
            \        'is not authorized to perform',\n        'Pending to Degraded',\n\
            \        'Stack deletion failed',\n        'Unsuccessful command execution',\n\
            \        'You do not have permission',\n        'Your quota allows for\
            \ 0 more running instance'];\n    var warningMessages = [\n        ' aborted\
            \ operation.',\n        ' to YELLOW',\n        ' to Unknown',\n      \
            \  'Adding instance ',\n        'Degraded to Info',\n        'Deleting\
            \ SNS topic',\n        'is currently running under desired capacity',\n\
            \        'Ok to Info',\n        'Ok to Warning',\n        'Pending Initialization',\n\
            \        'Removed instance ',\n        'Rollback of environment'\n   \
            \     ];\n    for(var dangerMessagesItem in dangerMessages) {\n      \
            \  if (message.indexOf(dangerMessages[dangerMessagesItem]) != -1) {\n\
            \            severity = 'danger';\n            break;\n        }\n   \
            \ }\n    // Only check for warning messages if necessary\n    if (severity\
            \ == 'good') {\n        for(var warningMessagesItem in warningMessages)\
            \ {\n            if (message.indexOf(warningMessages[warningMessagesItem])\
            \ != -1) {\n                severity = 'warning';\n                break;\n\
            \            }\n        }\n    }\n    postData.attachments = [\n     \
            \   {\n            'color': severity,\n            'text': message\n \
            \       }\n    ];\n    var options = {\n        method: 'POST',\n    \
            \    hostname: 'hooks.slack.com',\n        port: 443,\n${Param2}\n   \
            \ };\n    var req = https.request(options, function(res) {\n      res.setEncoding('utf8');\n\
            \      res.on('data', function (chunk) {\n        context.done(null);\n\
            \      });\n    });\n    req.on('error', function(e) {\n      console.log('problem\
            \ with request: ' + e.message);\n    });\n    req.write(util.format('%j',\
            \ postData));\n    req.end();\n};", {Param2: !Join ['', ['        path:
                  ''/services/', !Ref 'SlackWebhookToken', '''']], Param1: !Join [
              '', ['        ''channel'': ''#', !Ref 'SlackWebhookChannel', ''',']]}]
      Handler: index.handler
      Runtime: nodejs4.3
      Timeout: '10'
      Role: !GetAtt 'LambdaExecutionRole.Arn'
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Condition: CreateSlackIntegration
    Properties:
      FunctionName: !GetAtt 'LambdaSNSFunction.Arn'
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref 'BeanstalkSNSTopic'
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Condition: CreateSlackIntegration
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkEnhancedHealth
      Policies:
      - PolicyName: !Sub '${AWS::StackName}-slack'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - cloudformation:DescribeStacks
            - elasticbeanstalk:Describe*
            Resource: '*'
Outputs:
  BeanstalkSNSTopic:
    Value: !Ref 'BeanstalkSNSTopic'
