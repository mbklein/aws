AWSTemplateFormatVersion: '2010-09-09'
Description: Hydra SolrCloud stack using ECS
Parameters:
  StackName:
    Type: String
    Description: Name of the ElasticBeanstalk environment
  ResourceName:
    Type: String
    Description: Name of the resource (for tagging)
    Default: solr
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances
  SubnetID:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of an existing subnet IDs to use for the load balancer and auto
      scaling group
  SecurityGroups:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: A list of security groups, such as sg-a123fd85.
  LBSecurityGroups:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: A list of security groups, such as sg-a123fd85.
  DesiredCapacity:
    Type: Number
    Description: Number of instances to launch in your ECS cluster
  MaxSize:
    Type: Number
    Description: Maximum number of instances that can be launched in your ECS cluster
  InstanceType:
    Type: String
    Description: The EC2 instance type
  DockerImage:
    Type: String
    Description: Docker image to run
  HostedZoneName:
    Type: String
    Description: Route53 zone to create an alias in
  ZookeeperHosts:
    Type: String
    Description: A list of zookeeper host IP + ports
  DataVolumePath:
    Type: String
    Description: The path on the host container instance that is presented to the
      container
Mappings:
  AWSRegionToAMI:
    us-east-1:
      AMIID: ami-275ffe31
    us-east-2:
      AMIID: ami-62745007
    us-west-1:
      AMIID: ami-689bc208
    us-west-2:
      AMIID: ami-62d35c02
    eu-west-1:
      AMIID: ami-95f8d2f3
    eu-west-2:
      AMIID: ami-bf9481db
    eu-central-1:
      AMIID: ami-085e8a67
    ap-northeast-1:
      AMIID: ami-f63f6f91
    ap-southeast-1:
      AMIID: ami-b4ae1dd7
    ap-southeast-2:
      AMIID: ami-fbe9eb98
    ca-central-1:
      AMIID: ami-ee58e58a
Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
  taskdefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
      - Name: !Ref 'AWS::StackName'
        Cpu: '500'
        Environment:
        - Name: ZK_HOST
          Value: !Ref 'ZookeeperHosts'
        Essential: 'true'
        Image: !Ref 'DockerImage'
        Memory: '3000'
        Ulimits:
        - Name: nofile
          SoftLimit: 32000
          HardLimit: 32000
        PortMappings:
        - HostPort: 8983
          ContainerPort: 8983
        MountPoints:
        - SourceVolume: solrdata
          ContainerPath: /data/solr
      Volumes:
      - Host:
          SourcePath: !Ref 'DataVolumePath'
        Name: solrdata
  EcsElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Scheme: internal
      SecurityGroups: !Ref 'LBSecurityGroups'
      Subnets: !Ref 'SubnetID'
      CrossZone: 'true'
      ConnectionDrainingPolicy:
        Enabled: true
      Listeners:
      - LoadBalancerPort: '80'
        InstancePort: '8983'
        Protocol: HTTP
      HealthCheck:
        Target: HTTP:8983/solr/admin/collections?action=LIST
        HealthyThreshold: '2'
        UnhealthyThreshold: '10'
        Interval: '30'
        Timeout: '5'
  ECSRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Sub 'solr.${HostedZoneName}'
      HostedZoneName: !Ref 'HostedZoneName'
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt 'EcsElasticLoadBalancer.CanonicalHostedZoneNameID'
        DNSName: !GetAtt 'EcsElasticLoadBalancer.DNSName'
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref 'SubnetID'
      LaunchConfigurationName: !Ref 'ContainerInstances'
      MinSize: !Ref 'DesiredCapacity'
      MaxSize: !Ref 'MaxSize'
      DesiredCapacity: !Ref 'DesiredCapacity'
      HealthCheckType: ELB
      HealthCheckGracePeriod: '300'
      Tags:
      - Key: Name
        Value: !Sub '${StackName}-${ResourceName}'
        PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '2'
        MaxBatchSize: '1'
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'
  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            01_add_instance_to_cluster:
              command: !Sub |
                #!/bin/bash
                echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
            02_chmod_mounted_volumes:
              command: !Sub |
                #!/bin/bash
                mkdir -p ${DataVolumePath}
                chown -R 8983:8983 ${DataVolumePath}
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ContainerInstances --region ${AWS::Region}
                runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      ImageId: !FindInMap [AWSRegionToAMI, !Ref 'AWS::Region', AMIID]
      InstanceType: !Ref 'InstanceType'
      IamInstanceProfile: !Ref 'EC2InstanceProfile'
      KeyName: !Ref 'KeyName'
      SecurityGroups: !Ref 'SecurityGroups'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ContainerInstances --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}
  service:
    Type: AWS::ECS::Service
    DependsOn:
    - ECSAutoScalingGroup
    Properties:
      Cluster: !Ref 'ECSCluster'
      DesiredCount: !Ref 'DesiredCapacity'
      LoadBalancers:
      - ContainerName: !Ref 'AWS::StackName'
        ContainerPort: '8983'
        LoadBalancerName: !Ref 'EcsElasticLoadBalancer'
      Role: !Ref 'ECSServiceRole'
      TaskDefinition: !Ref 'taskdefinition'
  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ecs.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref 'EC2Role'
Outputs:
  URL:
    Value: !Sub 'http://${ECSRecordSet}/solr/'
    Export:
      Name: !Sub '${StackName}-${ResourceName}-URL'
