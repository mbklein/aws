AWSTemplateFormatVersion: '2010-09-09'
Description: Hydra-in-a-Box (branch '{{branch}}'; revision '{{commit}}')
Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances
  S3Bucket:
    Type: String
    Description: S3 bucket to the cfn deployment artifacts
  S3BucketEB:
    Type: String
    Description: S3 bucket to the eb deployment artifacts
  S3KeyPrefix:
    Description: S3 prefix to deployment artifacts
    Type: String
  WebappS3Key:
    Type: String
    Description: S3 key to webapp deployment artifacts
  PublicZoneName:
    Type: String
    Description: Existing Route53 zone; used to create a public DNS record for the
      web application
  DatabaseUsername:
    Type: String
    Description: Database Root Username
  DatabasePassword:
    Type: String
    Description: Password for the DB Root User
    NoEcho: 'true'
  DatabaseName:
    Type: String
    Description: Name of the database
  DatabaseStorageSize:
    Type: String
    Description: Size of DB in Gigs
  DatabaseMultiAZ:
    Type: String
    Description: Launch the database in multiple availability zones
  FcrepoDatabaseUsername:
    Type: String
    Description: Database Root Username
  FcrepoDatabasePassword:
    Type: String
    Description: Password for the DB Root User
    NoEcho: 'true'
  FcrepoDatabaseName:
    Type: String
    Description: Name of the database
  FcrepoDatabaseStorageSize:
    Type: String
    Description: Size of DB in Gigs
  FcrepoDatabaseMultiAZ:
    Type: String
    Description: Launch the database in multiple availability zones
  SecretKeyBase:
    Type: String
    Description: Secret key for Rails
    NoEcho: 'true'
  FcrepoInstanceType:
    Type: String
    Description: Instance type to launch
  S3FedoraFilename:
    Type: String
    Description: S3 key to the Fcrepo war
  FcrepoMinSize:
    Type: String
    Description: Minimum number of Fedora instances to launch
  FcrepoMaxSize:
    Type: String
    Description: Maximum number of Fedora instances to launch
  SolrCloudSize:
    Type: Number
    Description: Number of Solr instances to launch
  SolrCloudInstanceType:
    Type: String
    Description: Instance type to launch
  SolrCloudMaxSize:
    Type: Number
    Description: Maximum number of instances that can be launched in your ECS cluster
  SolrCloudDockerImage:
    Type: String
    Description: Docker image to run
  SolrCloudDataVolumePath:
    Type: String
    Description: The path on the host container instance that is presented to the
      container
  ZookeeperEnsembleSize:
    Type: Number
    Description: Number of instances to launch
  ZookeeperEnsembleInstanceType:
    Type: String
    Description: Instance type to launch
  ZookeeperEnsembleMaxSize:
    Type: String
    Description: Max number of zks
  ZookeeperDockerImage:
    Type: String
    Description: Docker Image for zks
  WorkerInstanceType:
    Type: String
    Description: Instance type to launch
  WorkerMinSize:
    Type: Number
    Description: Minimum number of instances to launch
  WorkerMaxSize:
    Type: Number
    Description: Maximum number of instances to launch
  WebappInstanceType:
    Type: String
    Description: Instance type to launch
  WebappMinSize:
    Type: Number
    Description: Minimum number of instances to launch
  WebappMaxSize:
    Type: Number
    Description: Maximum number of instances to launch
  WebappHealthReportingSystemType:
    Type: String
    Description: Health reporting system
    AllowedValues:
    - enhanced
    - basic
  WorkerHealthReportingSystemType:
    Type: String
    Description: Health reporting system
    AllowedValues:
    - enhanced
    - basic
  RedisInstanceType:
    Type: String
    Description: Instance type to launch
  BastionInstanceType:
    Type: String
    Description: The EC2 instance type
  DatabaseInstanceType:
    Type: String
    Description: Instance type to launch
  FcrepoDatabaseInstanceType:
    Type: String
    Description: Instance type to launch
  SlackWebhookToken:
    Type: String
    Description: Slack generated token for Incoming Webhook
    NoEcho: 'true'
  SlackWebhookChannel:
    Type: String
    Description: Slack channel for posting notifications
  ContinuousDeployment:
    Type: String
    Description: Configure continuous deployment for the webapp and workers?
  QueuePrefix:
    Type: String
    Description: SQS Queue prefix
  SSLCertificateId:
    Type: String
    Description: The Amazon Resource Name (ARN) of the SSL certificate
  GoogleAnalyticsId:
    Type: String
    Description: The Google Analytics id, e.g UA-111111-1
  HoneybadgerApiKey:
    Type: String
    Description: The api key for honeybadger.io
  LogzioKey:
    Type: String
    Description: The logz.io key
  VpnUser:
    Description: The username for the VPN user
    Type: String
  VpnPassword:
    Type: String
    Description: The password for the VPN user
    NoEcho: 'true'
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Deployment Artifacts
      Parameters:
      - S3Bucket
      - S3KeyPrefix
      - WebappS3Key
    - Label:
        default: Network Configuration
      Parameters:
      - KeyName
      - PublicZoneName
    - Label:
        default: Resources
      Parameters:
      - WorkerInstanceType
      - WorkerMinSize
      - WorkerMaxSize
      - WebappInstanceType
      - WebappMinSize
      - WebappMaxSize
      - DatabaseInstanceType
      - FcrepoDatabaseInstanceType
      - RedisInstanceType
      - FcrepoInstanceType
      - SolrCloudSize
      - SolrCloudInstanceType
      - ZookeeperEnsembleSize
      - ZookeeperEnsembleInstanceType
    - Label:
        default: Fedora Repository Configuration
      Parameters:
      - FcrepoDatabaseUsername
      - FcrepoDatabasePassword
    - Label:
        default: Application Configuration
      Parameters:
      - DatabaseUsername
      - DatabasePassword
      - SecretKeyBase
      - SSLCertificateId
    - Label:
        default: OpenVPN Configuration
      Parameters:
      - VpnUser
      - VpnPassword
Resources:
  vpc:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        StackName: !Ref 'AWS::StackName'
        KeyName: !Sub '${KeyName}'
        HostedZoneName: !Sub '${AWS::StackName}.vpc.${PublicZoneName}'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${S3Bucket}/cloudformation/${S3KeyPrefix}/templates/vpc.yaml'
  securitygroups:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        StackName: !Ref 'AWS::StackName'
        VPC: !GetAtt 'vpc.Outputs.VPCID'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${S3Bucket}/cloudformation/${S3KeyPrefix}/templates/securitygroups.yaml'
  zookeeper:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        StackName: !Sub '${AWS::StackName}-zookeeper'
        KeyName: !Sub '${KeyName}'
        SubnetID: !GetAtt 'vpc.Outputs.PrivateSubnets'
        SecurityGroups: !Sub '${securitygroups.Outputs.Zookeeper},${securitygroups.Outputs.Default}'
        LBSecurityGroups: !GetAtt 'securitygroups.Outputs.ZookeeperLb'
        HostedZoneName: !GetAtt 'vpc.Outputs.HostedZoneName'
        DesiredCapacity: !Ref 'ZookeeperEnsembleSize'
        MaxSize: !Ref 'ZookeeperEnsembleMaxSize'
        DockerImage: !Ref 'ZookeeperDockerImage'
        InstanceType: !Ref 'ZookeeperEnsembleInstanceType'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${S3Bucket}/cloudformation/${S3KeyPrefix}/templates/zookeeper.yaml'
  fcrepo:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        StackName: !Sub '${AWS::StackName}-fcrepo'
        KeyName: !Sub '${KeyName}'
        SubnetID: !GetAtt 'vpc.Outputs.PrivateSubnets'
        SecurityGroups: !Sub '${securitygroups.Outputs.Fcrepo},${securitygroups.Outputs.Default}'
        LBSecurityGroups: !GetAtt 'securitygroups.Outputs.FcrepoLb'
        S3Bucket: !Ref 'S3BucketEB'
        S3Key: !Ref 'S3FedoraFilename'
        MinSize: !Ref 'FcrepoMinSize'
        MaxSize: !Ref 'FcrepoMaxSize'
        HostedZoneName: !GetAtt 'vpc.Outputs.HostedZoneName'
        InstanceType: !Ref 'FcrepoInstanceType'
        RDSDatabaseName: !GetAtt 'fcrepodb.Outputs.DatabaseName'
        RDSHostname: !GetAtt 'fcrepodb.Outputs.EndpointAddress'
        RDSPort: !GetAtt 'fcrepodb.Outputs.EndpointPort'
        RDSUsername: !Ref 'FcrepoDatabaseUsername'
        RDSPassword: !Ref 'FcrepoDatabasePassword'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${S3Bucket}/cloudformation/${S3KeyPrefix}/templates/fcrepo.yaml'
  solr:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        StackName: !Sub '${AWS::StackName}-solr'
        KeyName: !Sub '${KeyName}'
        HostedZoneName: !GetAtt 'vpc.Outputs.HostedZoneName'
        SubnetID: !GetAtt 'vpc.Outputs.PrivateSubnets'
        SecurityGroups: !Sub '${securitygroups.Outputs.Solr},${securitygroups.Outputs.Default}'
        LBSecurityGroups: !GetAtt 'securitygroups.Outputs.SolrLb'
        ZookeeperHosts: !GetAtt 'zookeeper.Outputs.EndpointAddress'
        DesiredCapacity: !Ref 'SolrCloudSize'
        MaxSize: !Ref 'SolrCloudMaxSize'
        DockerImage: !Ref 'SolrCloudDockerImage'
        DataVolumePath: !Ref 'SolrCloudDataVolumePath'
        InstanceType: !Ref 'SolrCloudInstanceType'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${S3Bucket}/cloudformation/${S3KeyPrefix}/templates/solr.yaml'
  redis:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        SubnetID: !GetAtt 'vpc.Outputs.PrivateSubnets'
        SecurityGroups: !GetAtt 'securitygroups.Outputs.Redis'
        InstanceType: !Ref 'RedisInstanceType'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${S3Bucket}/cloudformation/${S3KeyPrefix}/templates/redis.yaml'
  database:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        SubnetID: !GetAtt 'vpc.Outputs.PrivateSubnets'
        SecurityGroups: !GetAtt 'securitygroups.Outputs.Database'
        MasterUsername: !Ref 'DatabaseUsername'
        MasterUserPassword: !Ref 'DatabasePassword'
        DatabaseName: !Ref 'DatabaseName'
        AllocatedStorage: !Ref 'DatabaseStorageSize'
        MultiAZDatabase: !Ref 'DatabaseMultiAZ'
        DBInstanceClass: !Ref 'DatabaseInstanceType'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${S3Bucket}/cloudformation/${S3KeyPrefix}/templates/postgres.yaml'
  fcrepodb:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        SubnetID: !GetAtt 'vpc.Outputs.PrivateSubnets'
        SecurityGroups: !GetAtt 'securitygroups.Outputs.FcrepoDatabase'
        MasterUsername: !Ref 'FcrepoDatabaseUsername'
        MasterUserPassword: !Ref 'FcrepoDatabasePassword'
        DatabaseName: !Ref 'FcrepoDatabaseName'
        AllocatedStorage: !Ref 'FcrepoDatabaseStorageSize'
        MultiAZDatabase: !Ref 'FcrepoDatabaseMultiAZ'
        DBInstanceClass: !Ref 'FcrepoDatabaseInstanceType'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${S3Bucket}/cloudformation/${S3KeyPrefix}/templates/postgres.yaml'
  application:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        StackName: !Ref 'AWS::StackName'
        KeyName: !Sub '${KeyName}'
        S3Bucket: !Ref 'S3Bucket'
        S3BucketEB: !Ref 'S3BucketEB'
        S3Key: !Ref 'WebappS3Key'
        S3KeyPrefix: !Ref 'S3KeyPrefix'
        BeanstalkSNSTopic: !GetAtt 'slack.Outputs.BeanstalkSNSTopic'
        QueuePrefix: !Ref 'QueuePrefix'
        PrivateSubnets: !GetAtt 'vpc.Outputs.PrivateSubnets'
        PublicSubnets: !GetAtt 'vpc.Outputs.PublicSubnets'
        SecurityGroups: !Sub '${securitygroups.Outputs.Webapp},${securitygroups.Outputs.Default}'
        LBSecurityGroups: !GetAtt 'securitygroups.Outputs.WebappLb'
        HostedZoneName: !Sub '${PublicZoneName}'
        SecretKeyBase: !Ref 'SecretKeyBase'
        FcrepoUrl: !GetAtt 'fcrepo.Outputs.URL'
        SolrUrl: !GetAtt 'solr.Outputs.URL'
        ZookeeperHosts: !Sub '${zookeeper.Outputs.EndpointAddress}/configs'
        RedisHost: !GetAtt 'redis.Outputs.EndpointAddress'
        RedisPort: !GetAtt 'redis.Outputs.EndpointPort'
        RDSDatabaseName: !GetAtt 'database.Outputs.DatabaseName'
        RDSHostname: !GetAtt 'database.Outputs.EndpointAddress'
        RDSPort: !GetAtt 'database.Outputs.EndpointPort'
        RDSUsername: !Ref 'DatabaseUsername'
        RDSPassword: !Ref 'DatabasePassword'
        WebappInstanceType: !Ref 'WebappInstanceType'
        WebappMinSize: !Ref 'WebappMinSize'
        WebappMaxSize: !Ref 'WebappMaxSize'
        WorkerInstanceType: !Ref 'WorkerInstanceType'
        WorkerMinSize: !Ref 'WorkerMinSize'
        WorkerMaxSize: !Ref 'WorkerMaxSize'
        WebappHealthReportingSystemType: !Ref 'WebappHealthReportingSystemType'
        WorkerHealthReportingSystemType: !Ref 'WorkerHealthReportingSystemType'
        SSLCertificateId: !Ref 'SSLCertificateId'
        ContinuousDeployment: !Ref 'ContinuousDeployment'
        GoogleAnalyticsId: !Ref 'GoogleAnalyticsId'
        HoneybadgerApiKey: !Ref 'HoneybadgerApiKey'
        LogzioKey: !Ref 'LogzioKey'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${S3Bucket}/cloudformation/${S3KeyPrefix}/templates/application.yaml'
  bastion:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        StackName: !Sub '${AWS::StackName}-bastion'
        KeyName: !Sub '${KeyName}'
        SubnetID: !GetAtt 'vpc.Outputs.PublicSubnets'
        InstanceType: !Ref 'BastionInstanceType'
        SecurityGroups: !GetAtt 'securitygroups.Outputs.Bastion'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${S3Bucket}/cloudformation/${S3KeyPrefix}/templates/bastion.yaml'
  slack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        SlackWebhookToken: !Ref 'SlackWebhookToken'
        SlackWebhookChannel: !Ref 'SlackWebhookChannel'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${S3Bucket}/cloudformation/${S3KeyPrefix}/templates/slack.yaml'
  mail:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        Domain: !Sub '${AWS::StackName}.${PublicZoneName}'
        HostedZoneName: !Sub '${PublicZoneName}'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${S3Bucket}/cloudformation/${S3KeyPrefix}/templates/mail.yaml'
  openvpn:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        StackName: !Sub '${AWS::StackName}-openvpn'
        KeyName: !Sub '${KeyName}'
        SubnetID: !Select ['0', !Split [',', !GetAtt 'vpc.Outputs.PublicSubnets']]
        SecurityGroups: !Sub '${securitygroups.Outputs.Bastion},${securitygroups.Outputs.OpenVPN}'
        HostedZoneName: !Sub '${AWS::StackName}.${PublicZoneName}'
        VpnUser: !Ref 'VpnUser'
        VpnPassword: !Ref 'VpnPassword'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${S3Bucket}/cloudformation/${S3KeyPrefix}/templates/openvpn.yaml'
  publicdns:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        SubZone: !Ref 'AWS::StackName'
        PublicZoneName: !Ref 'PublicZoneName'
      TemplateURL: !Sub 'https://s3.amazonaws.com/${S3Bucket}/cloudformation/${S3KeyPrefix}/templates/publicdns.yaml'
Outputs:
  URL:
    Description: URL for the deployed application
    Value: !GetAtt 'application.Outputs.URL'
  VPN:
    Description: URL for the OpenVPN server
    Value: !GetAtt 'openvpn.Outputs.URL'
