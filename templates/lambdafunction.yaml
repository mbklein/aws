AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda Function Installer
Parameters:
  StackName:
    Type: String
    Description: Name of the application stack (for tagging and naming)
  S3Bucket:
    Type: String
    Description: S3 bucket to the cfn deployment artifacts
  S3KeyPrefix:
    Description: S3 prefix to deployment artifacts
    Type: String
  Package:
    Description: Base name of zip file containing lambda code
    Type: String
  Handler:
    Description: Handler name
    Type: String
    Default: 'handler'
  AllowedActions:
    Type: CommaDelimitedList
    Description: A list of actions this lambda can perform
  AllowedResources:
    Type: CommaDelimitedList
    Description: A list of resources this lambda can act on
    Default: '*'
  SecurityGroups:
    Type: CommaDelimitedList
    Description: A list of security group ids, such as sg-a123fd85
    Default: ''
  SubnetID:
    Type: CommaDelimitedList
    Description: List of an existing subnet IDs the lambda will need to access
    Default: ''
  Timeout:
    Type: Number
    Description: 'Execution timeout'
    Default: '10'
Conditions:
  HasSubnetID: !Not [!Equals ["", !Join ["", !Ref SubnetID]]]
  HasSecurityGroups: !Not [!Equals ["", !Join ["", !Ref SecurityGroups]]]
  HasVpcConfig: !Or
  - !Not [!Equals ["", !Join ["", !Ref SubnetID]]]
  - !Not [!Equals ["", !Join ["", !Ref SecurityGroups]]]
Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: !Sub '${Package}-${Handler}-execution-policy'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: !Ref 'AllowedActions'
            Resource: !Ref 'AllowedResources'
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - iam:PassRole
            Resource:
            - "*"
          - Fn::If:
            - HasVpcConfig
            - Effect: Allow
              Action:
              - ec2:DescribeInstances
              - ec2:CreateNetworkInterface
              - ec2:AttachNetworkInterface
              - ec2:DescribeNetworkInterfaces
              - ec2:DeleteNetworkInterface
              - ec2:DetachNetworkInterface
              - ec2:ModifyNetworkInterfaceAttribute
              - ec2:ResetNetworkInterfaceAttribute
              Resource:
              - "*"
            - !Ref 'AWS::NoValue'
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref 'S3Bucket'
        S3Key: !Sub 'cloudformation/${S3KeyPrefix}/lambdas/${Package}.zip'
      VpcConfig:
        Fn::If:
        - HasVpcConfig
        - SecurityGroupIds: !If [HasSecurityGroups, !Ref 'SecurityGroups', !Ref 'AWS::NoValue']
          SubnetIds: !If [HasSubnetID, !Ref 'SubnetID', !Ref 'AWS::NoValue']
        - !Ref 'AWS::NoValue'
      Handler: !Sub 'index.${Handler}'
      Runtime: nodejs4.3
      Timeout: !Ref 'Timeout'
      Role: !GetAtt 'LambdaExecutionRole.Arn'
Outputs:
  ServiceToken:
    Description: Function ARN
    Value: !GetAtt 'LambdaFunction.Arn'
    Export:
      Name: !Sub '${StackName}-${Package}-${Handler}-ServiceToken'
